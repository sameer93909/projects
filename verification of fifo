DESIGN CODE:

module FIFO(input clk, rst, wr, rd,
            input [7:0] data_in, output reg [7:0] data_out,
            output empty, full);
  
  reg [3:0] wptr = 0, rptr = 0;
  
  reg [4:0] cnt = 0;
  
  reg [7:0] mem [15:0];
 
  always @(posedge clk)
    begin
      if (rst == 1'b1)
        begin
          wptr <= 0;
          rptr <= 0;
          cnt  <= 0;
        end
      else if (wr && !full)
        begin
          mem[wptr] <= data_in;
          wptr      <= wptr + 1;
          cnt       <= cnt + 1;
        end
      else if (rd && !empty)
        begin
         
          data_out <= mem[rptr];
          rptr <= rptr + 1;
          cnt  <= cnt - 1;
        end
    end
 
 
  assign empty = (cnt == 0) ? 1'b1 : 1'b0;
  assign full  = (cnt == 16) ? 1'b1 : 1'b0;
 
endmodule
 
//////////////////////////////////////

interface fifo_if;
  
  logic clk, rd, wr;         
  logic full, empty;          
  logic [7:0] data_in;         
  logic [7:0] data_out;        
  logic rst;                  
 
endinterface

TESTBENCH CODE:

class transaction;
  
  rand bit cntrl;
  bit rd,wr,full,empty;
  bit [7:0] data_in,data_out;
  
  constraint opr{
    
    cntrl dist {1:/50,0:/50};
  
  } 
endclass
/////////////////////////////////////////////////////////////////////////////////////////
class generator;
  transaction tr;
  mailbox #(transaction) mbx;
  int count=0;
  int i=0;
  event next,done;
  
  function new(mailbox #(transaction) mbx);
    this.mbx=mbx;
    tr=new();
  endfunction
  
  task run();
    repeat(count) begin
    assert(tr.randomize) else $error("the randomization has been failed");
      mbx.put(tr);
      i++;
      $display("[GEN]  contrl %0d and itteration:%0d",tr.cntrl,i);
      @(next);
     end
    ->done;
  endtask
  
  
endclass
////////////////////////////////////////////////////////////////////////////////////
class driver;
  
  transaction tr;
  mailbox #(transaction) mbx;
  virtual fifo_if fif;
  
  function new(mailbox #(transaction) mbx);
    this.mbx=mbx;
  endfunction
   
  task reset();
    fif.rst<=1'b1;
    fif.rd<=1'b0;
    fif.wr<=1'b0;
    fif.data_in <= 0;
    repeat(5)@(posedge fif.clk);
    fif.rst<=1'b0;
    @(posedge fif.clk);
    $display("[drv] the reset is done");
    $display("------------------------------------------------------------------------------------");
  endtask
  
  task write();
    @(posedge fif.clk);
    fif.rst<=1'b0;
    fif.wr<=1'b1;
    fif.rd<=1'b0;
    fif.data_in<=$urandom_range(0,9);
    @(posedge fif.clk);
    fif.wr<=1'b0;
    $display("[drv] data is written",fif.data_in);
    @(posedge fif.clk);
  endtask
  
  task read();
    @(posedge fif.clk);
    fif.rst<=1'b0;
    fif.rd<=1'b1;
    fif.wr<=1'b0;
    @(posedge fif.clk);
    fif.rd<=1'b0;
    $display("[drv]data read ");
    @(posedge fif.clk);
  endtask
  
  task run();
    
    
    forever begin
      mbx.get(tr);
      
      if(tr.cntrl==1'b1)
        
          write();
      
      else
        
          read();
      
    end
  endtask 
  
endclass
///////////////////////////////////////////////////////////////////////////////////////
class monitor;
  
  transaction trr;
  mailbox #(transaction) mbx;
  virtual fifo_if fif;
  
   function new(mailbox #(transaction) mbx);
    this.mbx=mbx;
  endfunction
  
  task run();
    trr=new();
     forever begin
       repeat (2) @(posedge fif.clk);
      trr.rd=fif.rd;
      trr.wr=fif.wr;
      trr.full=fif.full;
      trr.empty=fif.empty;
      trr.data_in=fif.data_in;
      @(posedge fif.clk);
      trr.data_out=fif.data_out;
    mbx.put(trr);
       $display("[mon] rd:%0d wr:%0d data_in:%0d data_out:%0d empty:%0d full:%0d",trr.rd,trr.wr,trr.data_in,trr.data_out,trr.empty,trr.full);
     end
  endtask
  
endclass
///////////////////////////////////////////////////////////////////////////////////////////
class scoreboard;
  
   transaction tr;
  mailbox #(transaction) mbx;
  bit [7:0] din [$];
  bit [7:0] temp;
  event next;
  int err=0;
  
   function new(mailbox #(transaction) mbx);
    this.mbx=mbx;
  endfunction
  
  task run();
    forever begin
    mbx.get(tr);
      $display("[sco] rd:%0d wr:%0d data_in:%0d data_out:%0d empty:%0d full:%0d",tr.rd,tr.wr,tr.data_in,tr.data_out,tr.empty,tr.full);
    
    if(tr.wr==1'b1) begin
      if(tr.full==1'b0) begin
        din.push_front(tr.data_in);
        $display("[sco] the data is stored in queue:%0d",tr.data_in);
      end
        else 
          
          begin
          $display("[sco] fifo is full");
          end
      $display("--------------------------------------"); 
    end
    
    
    if(tr.rd==1'b1) begin
      if(tr.empty==1'b0) begin
        temp=din.pop_back();
        
        if(tr.data_out==temp)   
          $display("the data is beign matched");
        else begin
          $display("the data is beign mismatched");
          err++;
      end
    end
    else 
      begin
        $display("[sco] fifo is empty"); 
      
      end
      $display("--------------------------------------"); 
    end
      ->next;
    end
  endtask
   
  
endclass
/////////////////////////////////////////////////////////////////////////////////////////////
class environment;
  
  generator gen;
  driver drv;
  monitor mon;
  scoreboard sco;
  
  event next;
  
  mailbox #(transaction) gdmbx;
  mailbox #(transaction) msmbx;
  
  virtual fifo_if fif;
  
  function new(virtual fifo_if fif);
    
    gdmbx=new();
    gen=new(gdmbx);
    drv=new(gdmbx);
    
    msmbx=new();
    mon=new(msmbx);
    sco=new(msmbx);
    
    gen.next=next;
    sco.next=next;
    
    this.fif=fif;
    drv.fif=this.fif;
    mon.fif=this.fif;
    
  endfunction
  
  task pre_test();
    drv.reset();
  endtask
  
  task test();
    fork
    gen.run();
    drv.run();
    mon.run();
    sco.run();
    join_any
  endtask
  
  task post_test();
    wait(gen.done.triggered);
    $display("------------------------------------------------------------------------------------");
    $display("Error Count :%0d", sco.err);
     $display("---------------------------------------------");
    $finish();
  endtask
  
  task run();
    pre_test();
    test();
    post_test();
  endtask

  
endclass
//////////////////////////////////////////////////////////////////////////////////////////////////
module tb;
  
 fifo_if fif();
  
  FIFO dut(.rst(fif.rst),.clk(fif.clk),.rd(fif.rd),.wr(fif.wr),.full(fif.full),.empty(fif.empty),.data_in(fif.data_in),.data_out(fif.data_out));
  
  initial begin
    fif.clk=0;
  end
  
  always #5 fif.clk=~fif.clk;
  
  environment env;
  
  initial begin
    env=new(fif);
    env.gen.count=20;
    env.run();
    
  end
  
  
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars;
  end
  
endmodule




